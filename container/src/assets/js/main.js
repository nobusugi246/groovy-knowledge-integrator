// Generated by CoffeeScript 1.12.5
(function() {
  var botsListVue, modalNewBot;

  botsListVue = new Vue({
    el: '#botsList',
    data: {
      botsList: []
    },
    created: function() {
      return $.ajax({
        url: '/bots',
        success: function(e) {
          return botsListVue.botsList = e;
        }
      });
    },
    methods: {
      left: function(event) {
        var cur;
        event.stopPropagation();
        cur = this.botsList.page.number;
        if (cur > 0) {
          return $.ajax({
            url: "/bots?page=" + (cur - 1),
            success: function(e) {
              return botsListVue.botsList = e;
            }
          });
        }
      },
      right: function(event) {
        var cur;
        event.stopPropagation();
        cur = this.botsList.page.number;
        if (cur < (this.botsList.page.totalPages - 1)) {
          return $.ajax({
            url: "/bots?page=" + (cur + 1),
            success: function(e) {
              return botsListVue.botsList = e;
            }
          });
        }
      }
    }
  });

  modalNewBot = new Vue({
    el: '#newBotModal',
    data: {
      name: '',
      from: 'Starter',
      botsList: [],
      message: ''
    },
    created: function() {
      return $.ajax({
        url: '/bots?size=1000',
        success: function(e) {
          return modalNewBot.botsList = e._embedded.bots;
        }
      });
    },
    methods: {
      close: function() {
        return this.message = '';
      },
      createNewBot: function() {
        var userName;
        userName = $('#userName').val().trim();
        if (!userName) {
          this.message = 'Please set your name.';
          return;
        }
        if (!this.name) {
          this.message = 'Please set new bot name.';
          return;
        }
        return $.ajax({
          method: 'POST',
          url: '/create',
          data: {
            'name': this.name,
            'from': this.from,
            'user': userName
          },
          success: function(e) {
            modalNewBot.message = e;
            return $.ajax({
              url: '/bots',
              success: function(e) {
                return botsListVue.botsList = e;
              }
            });
          }
        });
      }
    }
  });

  $(function() {
    var editor;
    if ((localStorage['userName'] != null) && ($('#userName').val().trim() != null)) {
      $('#userName').val(localStorage['userName']);
    }
    if ($('#userName').val().trim() === '') {
      $('#userName').focus();
    }
    $('#userName').on('keyup', function() {
      return localStorage['userName'] = $('#userName').val();
    });
    $('#createNewBotButton').on('click', function() {
      $('#newBotName').focus();
      return $.ajax({
        url: '/bots?size=1000',
        success: function(e) {
          return modalNewBot.botsList = e._embedded.bots;
        }
      });
    });
    editor = ace.edit("editor");
    editor.setTheme("ace/theme/monokai");
    editor.getSession().setMode("ace/mode/groovy");
    $('body').removeClass('uk-invisible');
    return console.log('coffee main started.');
  });

}).call(this);
